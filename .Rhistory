getwd()
#read csv
Sra<- read.table("./data/SraRunTable_walley_etal_2016.txt", header=TRUE,
sep=",", row.names="id")
#read csv
Sra<- read.table("/data/SraRunTable_walley_etal_2016.txt", header=TRUE,
sep=",", row.names="id")
getwd()
#read csv
Sra<- read.table("data/SraRunTable_walley_etal_2016.txt", header=TRUE,
sep="\t")
# , include=TRUE, warning=FALSE, echo=TRUE, error=FALSE
knitr::opts_knit$set(root.dir=normalizePath('../../'))
knitr::opts_chunk$set(warning=FALSE, message=FALSE, error=FALSE, echo=TRUE)
#read csv
Sra<- read.table("data/SraRunTable_walley_etal_2016.txt", header=TRUE,
sep="\t")
View(Sra)
head(Sra)
tail(Sra)
dim(Sra)
attach(mtcars)
mtcars
aggdata <-aggregate(mtcars, by=list(cyl,vs),
FUN=mean, na.rm=TRUE)
aggdata
library(mvoutlier)
cov(aggdata)
mode(aggdata)
class(aggdata$mpg)
(14+2)*((3/4)^2)                            #Q1.a	(14+2)*(3/4)^2
factorial(4)/(factorial(5)+factorial(3))    #Q1.b 4!/(5!+3!)
X<--12                                      #Q1.c(|X|+3Y)?((X+2)/vY) where X = -12 and Y = 4
Y<-4
(abs(X)+3*Y)*((X+2)/sqrt(Y))
c(1:20)                                                      #Q2.a	Integers from 1 to 20
c(seq(from=0,to=10,by=0.5))                                  #Q2.b	From 0 to 10 by 0.5
c("Hakuna","Matata","what","a","wonderful","phrase")         #Q2.c Individual words of the first line of the song Hakuna Matata
x<-c(seq(from=1, to=19, by=2))                                                          #Q3.a Create a vector of 10 odd numbers from 1 to 19
y<-c("Alex","Bob","Conway","David","Emma","Frank","Gabby","Helen","Iric","Kevin")       #Q3.b	Create another vector of 10 names
my.data<-as.data.frame(x)                                                               #Q3.c Merge these two vectors into two columns, but maintain the data type
colnames(my.data)<-c("ID")
my.data$Name<-c(y)
my.trees<-read.csv("treesR.csv", header = T)                                        #read in and assign to an object
getwd()
setwd("./largedata/Day 1/")
my.trees<-read.csv("treesR.csv", header = T)                                        #read in and assign to an object
View(my.trees)
head(my.trees, 10)                                                                  #Q4.a Select the first 10 rows and last 10 rows of data
tail(my.trees,10)                                                                   #Q4.b	Remove Lat/Lon columns
tree1.data<-as.data.frame(head(my.trees, 10))
tree2.data<-as.data.frame(tail(my.trees, 10))
my.trees2.data<-rbind(tree1.data,tree2.data)
my.trees3<-my.trees2.data[, c("PLOT","QUAD","MAPLE","ASH","OAK","TYPE")]
(14+2)*((3/4)^2)                            #Q1.a	(14+2)*(3/4)^2
?^
?factorial
factorial(4)/(factorial(5)+factorial(3))    #Q1.b 4!/(5!+3!)
X<--12                                      #Q1.c(|X|+3Y)?((X+2)/vY) where X = -12 and Y = 4
Y<-4
(abs(X)+3*Y)*((X+2)/sqrt(Y))
c(1:20)                                                      #Q2.a	Integers from 1 to 20
c(seq(from=0,to=10,by=0.5))                                  #Q2.b	From 0 to 10 by 0.5
c("Hakuna","Matata","what","a","wonderful","phrase")         #Q2.c Individual words of the first line of the song Hakuna Matata
x<-c(seq(from=1, to=19, by=2))                                                          #Q3.a Create a vector of 10 odd numbers from 1 to 19
my.data<-as.data.frame(x)                                                               #Q3.c Merge these two vectors into two columns, but maintain the data type
colnames(my.data)<-c("ID")
View(my.data)
my.data$Name<-c(y)
my.trees<-read.csv("treesR.csv", header = T)                                        #read in and assign to an object
setwd('./largedata/Day 1/')
my.trees<-read.csv("treesR.csv", header = T)                                        #read in and assign to an object
head(my.trees, 10)                                                                  #Q4.a Select the first 10 rows and last 10 rows of data
tail(my.trees,10)                                                                   #Q4.b	Remove Lat/Lon columns
tree1.data<-as.data.frame(head(my.trees, 10))
tree2.data<-as.data.frame(tail(my.trees, 10))
my.trees2.data<-rbind(tree1.data,tree2.data)
my.trees3<-my.trees2.data[, c("PLOT","QUAD","MAPLE","ASH","OAK","TYPE")]
write.csv(my.trees3,"treesR_new.csv", row.names = F)                                #Q4.c	Save as a new csv file, open in Excel
my.newtree<-read.csv("treesR_new.csv")                          #Q5.a 	Import from the newly saved csv
z<-c(sample(1:20,10,replace=F))                                 #Q5.b   Create a vector of 10 random numbers from 1 to 20
my.newtree1<-my.newtree[z,]                                     #Q5.c 	Select the rows of data that correspond to these rows
z
my.newtree1<-my.newtree[z,]                                     #Q5.c 	Select the rows of data that correspond to these rows
my.rowOAK<-my.newtree1[,"OAK"]                                  #Q5.d   Convert OAK (cm2/ha) to OAK_ft (ft2/acre) and add it as a new column
my.rowOAK1<-0.000435*my.rowOAK
my.newtree1$OAK_ft<-c(my.rowOAK1)
write.csv(my.newtree1,"my.newtree_OAK_ft.csv")
library(moments)             #use package "moments"
install.packages("moments")
library(moments)             #use package "moments"
cuckoos<-read.csv("https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/DAAG/cuckoos.csv")
attach(cuckoos)              #If we didn't use attach we would need to use cuckoos$XXX
View(cuckoos)
par(mfrow=c(1,1))
?layout
hist(length, breaks=seq(19.5,25,0.25))         #1a.	Plot a histogram of egg length.
hist(breadth, breaks=seq(15,17.5,0.125))       #1b.	Plot a histogram of egg length.
skewness(length)                               #1c.	Find the skewness value for egg length and breadth.
skewness(breadth)
?skewness
skewness()
skewness
kurtosis(length)                               #1d.	Find the kurtosis value for egg length and breadth.
kurtosis(breadth)
shapiro.test(length)                           #1f.	Run a Shapiro-Wilk on egg length and breadth.
shapiro.test(breadth)
#Q2
par(mfrow=c(1,1))
boxplot(breadth~species, data=cuckoos,
col=c("red","orange","yellow","green","blue", "purple"), ylab="breadth") #2a.	Create a box plot of the egg breadth of each species.
hedge.sparrow<-subset(cuckoos, species == "hedge.sparrow", select = breadth)     #2b.	Calculate the mean egg breadth for each species.
meadow.pipit<-subset(cuckoos, species == "meadow.pipit", select = breadth)
pied.wagtail<-subset(cuckoos, species == "pied.wagtail", select = breadth)
robin <-subset(cuckoos, species == "robin", select = breadth)
tree.pipit<-subset(cuckoos, species == "tree.pipit", select = breadth)
wren<-subset(cuckoos, species == "wren", select = breadth)
hedge.sparrowm<-mean(hedge.sparrow$breadth)
meadow.pipitm<-mean(meadow.pipit$breadth)
pied.wagtailm<-mean(pied.wagtail$breadth)
robinm<-mean(robin$breadth)
tree.pipitm<-mean(tree.pipit$breadth)
wrenm<-mean(wren$breadth)
boxplot(length~species, data=cuckoos,                                            #2c.	Create a box plot of the egg length for each species.
col=c("red","orange","yellow","green","blue", "purple"), ylab="length")
View(cuckoos)
hedge.sparrow<-subset(cuckoos, species == "hedge.sparrow", select = length)      #2d. Calculate the sd of egg length for each species.
meadow.pipit<-subset(cuckoos, species == "meadow.pipit", select = length)
pied.wagtail<-subset(cuckoos, species == "pied.wagtail", select = length)
robin <-subset(cuckoos, species == "robin", select = length)
tree.pipit<-subset(cuckoos, species == "tree.pipit", select = length)
wren<-subset(cuckoos, species == "wren", select = length)
hedge.sparrowsd<-sd(hedge.sparrow$length)
meadow.pipitsd<-sd(meadow.pipit$length)
pied.wagtailsd<-sd(pied.wagtail$length)
robinsd<-sd(robin$length)
tree.pipitsd<-sd(tree.pipit$length)
wrensd<-sd(wren$length)
breadthstand<-scale(breadth)                                                     #2e.	Create a scatter plot of standardized egg breadth and width.
lengthstand<-scale(length)
plot(breadthstand,lengthstand)
abline(lm(breadthstand~lengthstand), lty=4)
detach(cuckoos)
sugarcane<-read.csv("https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/boot/cane.csv")
attach(sugarcane)
sugarcane$color[sugarcane$block=="A"]<-"tomato2"
sugarcane$color[sugarcane$block=="B"]<-"dodgerblue4"
View(sugarcane)
sugarcane$color[sugarcane$block=="C"]<-"orange"
sugarcane$color[sugarcane$block=="D"]<-"dark green"
par(mfrow=c(1,1))
plot(r~n, data=sugarcane, col=color,xlab="Total number of shoots in each plot",ylab="The number of diseased shoots", pch=19)
legend("topleft", pch=c(19, 19,19,19),
col=c("tomato2", "dodgerblue4","orange","dark green"),
legend=c("Block A", "Block B","Block C","Block D"))
abline(lm(r~n), lty=1)
par(mfrow=c(2,2))
sugarcane.A<-sugarcane[sugarcane$block=="A",]
sugarcane.B<-sugarcane[sugarcane$block=="B",]
sugarcane.C<-sugarcane[sugarcane$block=="C",]
sugarcane.D<-sugarcane[sugarcane$block=="D",]
plot(r~n, data=sugarcane.A, col=color, pch=0,
xlim=c(min(sugarcane$n), max(sugarcane$n)),
ylim=c(min(sugarcane$r), max(sugarcane$r)),xlab="Total number of shoots in each plot",
ylab="The number of diseased shoots", main="Block A")
abline(lm(r~n, data=sugarcane.A),lty=2,lwd=2)
plot(r~n, data=sugarcane.B, col=color, pch=15,
xlim=c(min(sugarcane$n), max(sugarcane$n)),
ylim=c(min(sugarcane$r), max(sugarcane$r)),xlab="Total number of shoots in each plot",
ylab="The number of diseased shoots",main="Block B")
abline(lm(r~n, data=sugarcane.B),lty=3,lwd=2)
plot(r~n, data=sugarcane.C, col=color, pch=2,
xlim=c(min(sugarcane$n), max(sugarcane$n)),
ylim=c(min(sugarcane$r), max(sugarcane$r)),xlab="Total number of shoots in each plot",
ylab="The number of diseased shoots",main = "Block C")
abline(lm(r~n, data=sugarcane.C),lty=4,lwd=2)
plot(r~n, data=sugarcane.D, col=color, pch=17,
xlim=c(min(sugarcane$n), max(sugarcane$n)),
ylim=c(min(sugarcane$r), max(sugarcane$r)),xlab="Total number of shoots in each plot",
ylab="The number of diseased shoots",main="Block D")
abline(lm(r~n, data=sugarcane.D),lty=2,lwd=3)
par(mfrow=c(1,1))
boxplot(n~block, data=sugarcane, log="y",                                         #log scale y axis
col=c("tomato2","dodgerblue4","orange","dark green" ),
ylab="The number of shoots in each plot[log scale]",xlab="Block",pch=20)
par(mfrow=c(1,1))
mean<-tapply(sugarcane$r, sugarcane$block, mean)
sd<-tapply(sugarcane$r, sugarcane$block, sd)
nbr<-tapply(sugarcane$r, sugarcane$block, length)
se<-sd/sqrt(nbr)
par(mfrow=c(1,1))
barplot(mean, col=c("tomato2","dodgerblue4","orange","dark green"),
border=c("tomato2","dodgerblue4","orange","dark green"),
ylab="The number of diseased shoots",xlab = "Block", ylim=c(0,30))
xx<-barplot(mean, plot=F)                                                   ##### adding error bars
arrows(xx, mean, xx, mean+se, angle=90,
col=c("tomato2","dodgerblue4","orange","dark green"), lwd=2)
xx<-barplot(mean, plot=F)                                                   ##### adding error bars
arrows(xx, mean, xx, mean+se, angle=90,
col=c("tomato2","dodgerblue4","orange","dark green"), lwd=2)
par(mfrow=c(1,1))
barplot(mean, col=c("tomato2","dodgerblue4","orange","dark green"),
border=c("tomato2","dodgerblue4","orange","dark green"),
ylab="The number of diseased shoots",xlab = "Block", ylim=c(0,30))
xx<-barplot(mean, plot=F)                                                   ##### adding error bars
arrows(xx, mean, xx, mean+se, angle=90,
col=c("tomato2","dodgerblue4","orange","dark green"), lwd=2)
library(moments)             #use package "moments"
speciesarea<-read.csv("speciesarea.csv")
getwd()
setwd('../Day 3/Exercise 3/')
speciesarea<-read.csv("speciesarea.csv")
View(speciesarea)
x <- speciesarea[,2]  ## Area                    #1a.	Calculate the correlation between A and M
y <- speciesarea[,3]  ## Mammals
cor.test(x,y)
lnA<-log(x)                                      #1b.	Calculate the correlation between lnA and lnM
lnM<-log(y)
cor.test(lnA,lnM)
bird<-read.csv("bird.csv", header=T)             #1c. merge and calculate the correlation between M and B
MB<-merge(bird, speciesarea, by=c("Name"))
z<-MB[,2]             ## Bird
View(bird)
View(MB)
z
cor.test(z,y)
cor.test(MB$Birds,MB$Mammals)
rm(list=ls(all=TRUE)) ##clean the memory         #2a.ANOVA of infant mortality and region
infant<-read.csv("infantmortality.csv")
y<-infant[,3] ## infant mortality
mode(infant)
infant
y<-infant[,3] ## infant mortality
trt<-infant[,4]## region
boxplot(y~trt, ylab="infant mortality")
summary(aov(y~trt))
rm(list=ls(all=TRUE)) ##clean the memory         #2b.ANOVA of infant mortality and oil-exporting or not
infant<-read.csv("infantmortality.csv")
y<-infant[,3] ## infant mortality
trt<-infant[,5]## oil-exporting or not
boxplot(y~trt, ylab="infant mortality")
summary(aov(y~trt))
rm(list=ls(all=TRUE)) ##clean the memory         #2c.linear regression of income and infant mortality
infant<-read.csv("infantmortality.csv")
x <- infant[,2]  ## income
y <- infant[,3]  ## infant mortality
lm(y~x) ## linear model regression
summary(lm(y~x)) ## summarize all results of the linear model regression
plot(x,y, xlab="per-capital income", ylab="infant mortality rate" ) ## plot the data
abline(lm(y~x)) ##include the regression line in the plot
rm(list=ls(all=TRUE)) ##clean the memory
justice<-read.csv("justice.csv",header=T, row.names=2)
x <- justice[,5]  ## First Amendment                    #3a.	Calculate the correlation between First Amendment  and Economic
y <- justice[,7]  ## Economic
cor.test(x,y)
#3b.  hc cluster analysis
d<-dist(justice,method="euclidean") ##calculate the Euclidean distance between each data point
hc<-hclust(d,method="complete") ## do the cluster analysis
plot(hc) ##plot the result of cluster analysis
?hclust
y <- c("q", "w", "e", "r", "z", "c")
for (x in y) {
print(x) ##task statement
}
rm(list=ls(all=TRUE)) ##clean the memory
a = matrix(c(1:1000000), nrow =100000  , ncol = 10)            # for loop without apply
SUM = NULL
y<-c(1:100000)
for (x in y){
SUM[x]=sum(a[x,])
}
rm(list=ls(all=TRUE)) ##clean the memory                      # apply method
a = matrix(c(1:1000000), nrow =100000  , ncol = 10)
apply(a,1,sum)
(14+2)*((3/4)^2)                            #Q1.a	(14+2)*(3/4)^2
c(1:20)                                                      #Q2.a	Integers from 1 to 20
my.data<-as.data.frame(x)                                                               #Q3.c Merge these two vectors into two columns, but maintain the data type
colnames(my.data)<-c("ID")
my.data$Name<-c(y)
y<-c("Alex","Bob","Conway","David","Emma","Frank","Gabby","Helen","Iric","Kevin")       #Q3.b	Create another vector of 10 names
my.data<-as.data.frame(x)                                                               #Q3.c Merge these two vectors into two columns, but maintain the data type
colnames(my.data)<-c("ID")
x<-c(seq(from=1, to=19, by=2))                                                          #Q3.a Create a vector of 10 odd numbers from 1 to 19
y<-c("Alex","Bob","Conway","David","Emma","Frank","Gabby","Helen","Iric","Kevin")       #Q3.b	Create another vector of 10 names
my.data<-as.data.frame(x)                                                               #Q3.c Merge these two vectors into two columns, but maintain the data type
colnames(my.data)<-c("ID")
my.data$Name<-c(y)
View(my.data)
mode(my.data)
getwd
getwd()
my.trees<-read.csv("./largedata/Day1/treesR.csv", header = T)
setwd('./largedata/Day 1/')
my.trees<-read.csv("treesR.csv", header = T)                                        #read in and assign to an object
View(my.trees)
head(my.trees, 10)                                                                  #Q4.a Select the first 10 rows and last 10 rows of data
tail(my.trees,10)                                                                   #Q4.b	Remove Lat/Lon columns
tree1.data<-as.data.frame(head(my.trees, 10))
tree2.data<-as.data.frame(tail(my.trees, 10))
my.trees2.data<-rbind(tree1.data,tree2.data)
my.trees3<-my.trees2.data[, c("PLOT","QUAD","MAPLE","ASH","OAK","TYPE")]
write.csv(my.trees3,"treesR_new.csv", row.names = F)                                #Q4.c	Save as a new csv file, open in Excel
my.newtree<-read.csv("treesR_new.csv")                          #Q5.a 	Import from the newly saved csv
z<-c(sample(1:20,10,replace=F))                                 #Q5.b   Create a vector of 10 random numbers from 1 to 20
my.newtree1<-my.newtree[z,]                                     #Q5.c 	Select the rows of data that correspond to these rows
my.rowOAK<-my.newtree1[,"OAK"]                                  #Q5.d   Convert OAK (cm2/ha) to OAK_ft (ft2/acre) and add it as a new column
my.rowOAK1<-0.000435*my.rowOAK
mode(my.rowOAK1)
class(my.rowOAK1)
my.rowOAK1
my.newtree1$OAK_ft<-c(my.rowOAK1)
write.csv(my.newtree1,"my.newtree_OAK_ft.csv")
getwd()
